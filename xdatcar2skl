#!/usr/bin/env perl

sub printHelp
{
   print <<ENDHELP;
###############################################################################
#Program:  xdatcar2skl
#Purpose:  This program will read in a vasp xdatcar data file and produce an
#          olcao.skl skeleton input file.
#
#AUTHOR:   Alysse Weigand
#LAST MODIFIED: April 11, 2025          
#USAGE:    xdatcar2skl
#COMMANDS:
#  -sr <rate>       Set the sampling rate. This will sample every <rate> configuration and create skl files.
#  -sn <number>     Set the sample number (single). This will pull a single configuration (<number>) and create a skl file.
#  -d               Enable dipole flag. Only for use with dipole series. 
#  -skl             This will print skl as olcao.skl.<config_number>. Must not be activated for -d. If not activated skl files will overwrite eachother.
#  -h, -help        Show this help message and exit
#
###############################################################################
ENDHELP
   exit;
}

#############################################
# BEGIN PROGRAM EXECUTION                   #
#############################################

use strict;
use warnings;
use Env;
use lib "$OLCAO_BIN/perl5";
use ElementData;
use StructureControl;

# Declare global variables.
my $inputFile;
my $atomFile;
my $outputFile;
my $numElements;
my @elementList;
my @atomElement;
my $systemTitle;
my $numAtoms;
my $scale;
my ($a, $b, $c);
my ($alpha, $beta, $gamma);
my (@atomA, @atomB, @atomC);
my $line;
my @values;
my $difference;
my ($i, $j, $k, $m);
my $samplingRate;
my $sampleNumber;
my $dipoleFlag;
my $seriesFlag;
my $singleFlag;
my $sklPrintFlag;

# Initialize the default values.
&assignDefaults;

# Parse the command line.
&parseCommandLine;

# Read preliminary data from POTCAR.
&initEnvironment;

# Read the vasp input file.
&readVASP;


#############################################
# END PROGRAM EXECUTION                     #
#############################################

sub assignDefaults
{
   # Define the default parameter values.
   $inputFile = "XDATCAR";
   $atomFile = "POTCAR";
   $dipoleFlag = 0;
   $seriesFlag = 0;
   $singleFlag = 0;
   $sklPrintFlag = 0;
}

# Parse the command line.
sub parseCommandLine
{
   # Declare local variables.
   my $number = 0;
   my $argument;
   my $commandLine = "command";

   while ($number < scalar(@ARGV))
   {
      if ($ARGV[$number] eq "-sr") {
         $number++;
         die "Missing value for -sr\n" if $number >= scalar(@ARGV);
         $samplingRate = $ARGV[$number];
         $seriesFlag = 1;
      }
      elsif ($ARGV[$number] eq "-sn") {
         $number++;
         die "Missing value for -sn\n" if $number >= scalar(@ARGV);
         $sampleNumber = $ARGV[$number];
         $singleFlag = 1;
      }
      elsif ($ARGV[$number] eq "-d") {
         $dipoleFlag = 1;
      }
      elsif ($ARGV[$number] eq "-skl") {
         $sklPrintFlag = 1;
      }
      elsif ($ARGV[$number] eq "-help" || $ARGV[$number] eq "-h") {
         printHelp();  # Assuming this subroutine exists
         exit;
      }
      else {
         print STDERR "UNKNOWN COMMAND LINE PARAMETER $ARGV[$number]. BYE.\n";
         exit 1;
      }

      if ($number > scalar(@ARGV))
      {
         print STDOUT "Command line overrun.\n";
         print STDOUT "Check command line parameters for missing options.\n";
         die "Aborting\n";
      }
      else
         {$number++;}
   }

   # Record the command line used to shift the skl data.
   open (COMMANDLINE,">>$commandLine");
   print COMMANDLINE "xdatcar2skl ";
   foreach $argument (0..$#ARGV)
      {print COMMANDLINE "$ARGV[$argument] ";}
   print COMMANDLINE "\n";
   close (COMMANDLINE);
}

# Initialize the environment where the script will execute.
sub initEnvironment
{
   # Open the input, atom, and output files for reading and writing.
   open (VASP,"<$inputFile") || die "Cannot open $inputFile for reading.\n";
   open (ATOMS,"<$atomFile") || die "Cannot open $atomFile for reading.\n";

   # Obtain the list of atoms present in the system.
   $numElements = 0;
   while ($line = <ATOMS>)
   {
      if ($line =~ /TITEL/)
      {
         $numElements++;
         chomp ($line);
         @values = split(/\s+/,$line);
         @values = split(/\_/,$values[4]);
         $elementList[$numElements] = lc($values[0]);
      }
   }
   close (ATOMS);
}


# Read the vasp data file and extract all the important data.
sub readVASP
{
   use POSIX;

   my @lineValues;
   my ($ax, $ay, $az);
   my ($bx, $by, $bz);
   my ($cx, $cy, $cz);
   my @atomCounts;
   my $atomCounter;

   # Read the comment line
   $systemTitle = <VASP>;
   chomp $systemTitle;

   # Read the scale line and extract the value from it.
   &getValues;
   $scale = $values[0];

   # Read the three a, b, c lattice vectors in their x, y, z orthogonal format.
   #   Then scale it according to the scale variable and save the individual
   #   components.
   ($ax,$ay,$az) = &getVector ($ax,$ay,$az);
   ($bx,$by,$bz) = &getVector ($bx,$by,$bz);
   ($cx,$cy,$cz) = &getVector ($cx,$cy,$cz);

   # Read the set of atom ranges so that we know how many of each element atom
   #   is present in the system.
   # ========================= 10/28/2010 3:53 pm ============================
   # These extra line here are to make it compatible with VASP 5.2 CONTCAR.

   &getValues;
   @atomCounts = @values;
#   if ($atomCounts[0] * 1 eq $atomCounts[0])
   if ($atomCounts[0] !~ /[a-zA-Z]/)
      {print "XDATCAR file from VASP 4.6\n";}
   else
   {
	   print "XDATCAR file from VASP 5.2 \n";
	   &getValues;
	   @atomCounts = @values;
   }
   # =========================================================================
   # Compute the total number of atoms.
   $numAtoms = 0;
   for ($i=0;$i<=$#values;$i++)
      {$numAtoms+=$values[$i];}

  
   # Determine the element for each atom.
   #   The number of atoms of each element is in @atomCounts.
   #   $atomCounter is the index for each atom in the system.
   #   @atomElement is the element name for each atom.
   #   @elementList is the list of elements in the system.
   $atomCounter = 0;
   for ($i=1;$i<=$numElements;$i++)
   {
      for ($j=1;$j<=$atomCounts[$i-1];$j++) # Note the -1.  It starts at 0.
      {
         $atomCounter++;
         $atomElement[$atomCounter] = $elementList[$i];
      }
   }

   # Compute the cell parameters.
   $a = sqrt($ax*$ax+$ay*$ay+$az*$az);
   $b = sqrt($bx*$bx+$by*$by+$bz*$bz);
   $c = sqrt($cx*$cx+$cy*$cy+$cz*$cz);
   $alpha = acos(($bx*$cx+$by*$cy+$bz*$cz)/($b*$c))/3.1415926535*180.0;
   $beta  = acos(($ax*$cx+$ay*$cy+$az*$cz)/($a*$c))/3.1415926535*180.0;
   $gamma = acos(($ax*$bx+$ay*$by+$az*$bz)/($a*$b))/3.1415926535*180.0;

   # Read the atom positions.
   $i = 0;
   $m = 0;

  
   while ($line = <VASP>)
   {

      @lineValues = split(/\s+/, $line);


      if ($lineValues[0] =~  /Direct/)
      {
         $i++;

         for ($j=1;$j<=$numAtoms;$j++)
         {
            # Get the current line with atom positions and split it into values.
            &getValues;

            # Extract the fractional coordinate atom positions.
            $atomA[$j][$i] = $values[0];
            $atomB[$j][$i] = $values[1];
            $atomC[$j][$i] = $values[2];


            if ($i > 1)
            {

               # Calculate difference in atom A positions
               $difference = $atomA[$j][$i] - $atomA[$j][$i-1];

               if ($difference < -0.5) 
               {
                  if (abs($atomA[$j][$i-1]) > 0.5)
                  {
                     $atomA[$j][$i] = $atomA[$j][$i] + 1;
                  }
                  else
                  {  
                     $atomA[$j][$i] = $atomA[$j][$i];
                  }
               }
               elsif ($difference > 0.5) 
               {  
                  if (abs($atomA[$j][$i-1]) < 0.5)
                  {
                     $atomA[$j][$i] = $atomA[$j][$i] - 1;
                  }
                  else
                  {
                     $atomA[$j][$i] = $atomA[$j][$i];
                  }
               }
               else
               {      
                  $atomA[$j][$i] = $atomA[$j][$i]
               }


               # Calculate difference in atom B positions
               $difference = $atomB[$j][$i] - $atomB[$j][$i-1];

               if ($difference < -0.5) 
               {
                  if (abs($atomB[$j][$i-1]) > 0.5)
                  {
                     $atomB[$j][$i] = $atomB[$j][$i] + 1;
                  }
                  else
                  {
                     $atomB[$j][$i] = $atomB[$j][$i];
                  }
               }
               elsif ($difference > 0.5) 
               {
                  if (abs($atomB[$j][$i-1]) < 0.5)
                  {
                     $atomB[$j][$i] = $atomB[$j][$i] - 1;
                  }
                  else
                  { 
                     $atomB[$j][$i] = $atomB[$j][$i];
                  }
               }
               else
               {      
                  $atomB[$j][$i] = $atomB[$j][$i]
               }

               # Calculate difference in atom C positions
               $difference = $atomC[$j][$i] - $atomC[$j][$i-1];

               if ($difference < -0.5) 
               {
                  if (abs($atomC[$j][$i-1]) > 0.5)
                  {
                     $atomC[$j][$i] = $atomC[$j][$i] + 1;
                  }
                  else
                  {
                     $atomC[$j][$i] = $atomC[$j][$i];
                  }
               }
               elsif ($difference > 0.5) 
               {
                  if (abs($atomC[$j][$i-1]) < 0.5)
                  {
                     $atomC[$j][$i] = $atomC[$j][$i] - 1;
                  }
                  else
                  { 
                     $atomC[$j][$i] = $atomC[$j][$i];
                  }
               }
               else
               {      
                  $atomC[$j][$i] = $atomC[$j][$i]
               }
            }
         }

         # We only want to print out the skl files that fall within out sampling rate
         if ($seriesFlag == 1)
         {
            if ($i % $samplingRate == 0 or $i == 1)
            {
               $m++;
               if ($sklPrintFlag == 1)
               {
                  $outputFile = "olcao.skl.$i"
               }
               else
               {
                  $outputFile = "olcao.skl"
               }

               open (SKL,">$outputFile") || die "Cannot open $outputFile for writing.\n";
               &printSkl;

               # Call the seriesData.py script on the newly created .skl file
               if ($dipoleFlag == 1 and $sklPrintFlag == 0)
               {
                  system("seriesData.py") == 0
                  or die "Failed to execute seriesData.py:  $!";
               }
               else
               {
               }
            }

         }
         elsif ($singleFlag == 1) 
         {
            if ($i == $sampleNumber)
            {
               $m++;
               $outputFile = "olcao.skl";
               open (SKL,">$outputFile") || die "Cannot open $outputFile for writing.\n";
               &printSkl;
            }
            else
            {
            }
         }
         else
         {
         }
      }
      else
      {
        last if eof(VASP);
      }
   }

   # Close the VASP input file.
   close (VASP);
}

# NOTE for new olcao this will need to inclue a line for a flag
# #   that fixes the "return" issue with the atoms

sub printSkl
{
   # Print the header for the skl file.
   print SKL <<HEADER;
title
$systemTitle Structure File $i
end
cell
HEADER

   # Print the cell parameters.
   printf SKL ("%10.6f %10.6f %10.6f %10.6f %10.6f %10.6f\n",
        $a,$b,$c,$alpha,$beta,$gamma);

   # Print out the atom positions.
   print SKL "fractional $numAtoms\n";
   for ($k=1;$k<=$numAtoms;$k++)
      {printf SKL ("%-4s %15.9f %15.9f %15.9f\n",$atomElement[$k],$atomA[$k][$i],$atomB[$k][$i],$atomC[$k][$i]);}

   # Print out the trailing information
   print SKL <<TRAILING;
space 1_a
supercell 1 1 1
prim
TRAILING

   # Close the SKL output file.
   close (SKL);
}

sub getVector
{
   # Declare local variables.
   my ($x, $y, $z);

   # Get the passed x, y, z vector.
   $x = $_[0];
   $y = $_[1];
   $z = $_[2];

   # Read the line for this lattice vector.
   &getValues;

   # Scale the vector and save its components.
   ($x, $y, $z) = ($scale*$values[0], $scale*$values[1], $scale*$values[2]);

   return ($x, $y, $z);
}

sub getValues
{
   # Read the line, split it, and shift it to get ride of leading white space.
   $line = <VASP>;
   chomp ($line);
   @values = split (/\s+/,$line);
   if ($values[0] eq "")
      {shift @values;}
}
